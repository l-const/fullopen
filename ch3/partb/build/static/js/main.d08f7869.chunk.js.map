{"version":3,"sources":["components/Footer.js","components/Note.js","components/notification.js","services/notes.js","App.js","index.js"],"names":["Footer","style","color","fontStyle","fontSize","Note","note","toggleImportance","label","important","className","content","onClick","Notification","message","baseUrl","axios","get","then","response","data","newObject","post","id","put","App","useState","notes","setNotes","newNote","setNewNote","showAll","setShowAll","errorMessage","setErrorMesssage","useEffect","console","log","noteService","initialNotes","notesToShow","filter","map","i","url","find","n","changedNote","returndNote","catch","error","setTimeout","toggleImportanceOf","onSubmit","event","preventDefault","noteObject","date","Date","toISOString","Math","random","concat","value","onChange","target","type","ReactDOM","render","document","getElementById"],"mappings":"4KAceA,EAdA,WAMb,OACE,sBAAKC,MANa,CAClBC,MAAO,QACPC,UAAW,SACXC,SAAU,IAGV,UACE,uBACA,2GCOSC,EAbF,SAAC,GAA8B,IAA7BC,EAA4B,EAA5BA,KAAMC,EAAsB,EAAtBA,iBACXC,EAAQF,EAAKG,UACjB,qBAAuB,iBACzB,OAEI,qBAAIC,UAAU,OAAd,UACKJ,EAAKK,QACN,wBAAQC,QAASL,EAAjB,SAAoCC,QCEjCK,EAZM,SAAC,GAAe,IAAdC,EAAa,EAAbA,QACnB,OAAgB,OAAZA,EACO,KAIP,qBAAKJ,UAAU,QAAf,SACKI,K,gBCNPC,EAAU,sDAkBD,EAhBA,WAEX,OADgBC,IAAMC,IAAIF,GACXG,MAAK,SAAAC,GAAQ,OAAIA,EAASC,SAc9B,EAXA,SAAAC,GAEX,OADiBL,IAAMM,KAAKP,EAASM,GACtBH,MAAK,SAAAC,GAAQ,OAAIA,EAASC,SAS9B,EALA,SAACG,EAAIF,GAEhB,OADiBL,IAAMQ,IAAN,UAAaT,EAAb,YAAwBQ,GAAMF,GAChCH,MAAK,SAAAC,GAAQ,OAAIA,EAASC,SCoF9BK,EA5FH,WAAO,IAAD,EACUC,mBAAS,IADnB,mBACTC,EADS,KACFC,EADE,OAEcF,mBAAS,IAFvB,mBAETG,EAFS,KAEAC,EAFA,OAGcJ,oBAAS,GAHvB,mBAGTK,EAHS,KAGAC,EAHA,OAIyBN,mBAAS,sBAJlC,mBAITO,EAJS,KAIKC,EAJL,KAOhBC,qBAAU,WACRC,QAAQC,IAAI,UACZC,IAEGpB,MAAK,SAAAqB,GACJX,EAASW,QAEZ,IAGH,IA6CMC,EAAcT,EAChBJ,EACAA,EAAMc,QAAO,SAAAnC,GAAI,OAAIA,EAAKG,aAE9B,OACE,gCACE,uCACA,cAAC,EAAD,CAAcK,QAASmB,IACvB,8BACE,yBAAQrB,QAAS,kBAAMoB,GAAYD,IAAnC,kBACQA,EAAU,YAAc,WAGlC,6BACGS,EAAYE,KAAI,SAACpC,EAAMqC,GAAP,OACf,cAAC,EAAD,CAAcrC,KAAMA,EAAMC,iBAAmB,YAvC1B,SAAAgB,GACzB,IAAMqB,EAAG,sCAAkCrB,GACrCjB,EAAOqB,EAAMkB,MAAM,SAAAC,GAAC,OAAIA,EAAEvB,KAAOA,KACjCwB,EAAW,2BAAOzC,GAAP,IAAaG,WAAYH,EAAKG,YAE/C6B,EACQM,EAAKG,GACZ7B,MAAM,SAAA8B,GACLpB,EAASD,EAAMe,KAAI,SAAApC,GAAI,OAAIA,EAAKiB,KAAOA,EAAKjB,EAAO0C,SAEpDC,OAAO,SAAAC,GACNhB,EAAiB,aAAD,OAED5B,EAAKK,QAFJ,qCAKhBwC,YAAW,WACTjB,EAAiB,QAChB,KACHN,EAASD,EAAMc,QAAO,SAAAK,GAAC,OAAIA,EAAEvB,KAAOA,SAoBoB6B,CAAmB9C,EAAKiB,MAAjEoB,QAGf,uBAAMU,SA/DM,SAACC,GACfA,EAAMC,iBACN,IAAMC,EAAa,CACjB7C,QAASkB,EACT4B,MAAM,IAAIC,MAAOC,cACjBlD,UAAWmD,KAAKC,SAAW,IAE7BvB,EACUkB,GACPtC,MAAK,SAAA8B,GACJpB,EAASD,EAAMmC,OAAOd,IACtBlB,EAAW,QAoDb,UACE,uBACEiC,MAAOlC,EACPmC,SAlDiB,SAACV,GACxBlB,QAAQC,IAAIiB,EAAMW,OAAOF,OACzBjC,EAAWwB,EAAMW,OAAOF,UAkDpB,wBAAQG,KAAK,SAAb,qBAEF,cAAC,EAAD,Q,MC1FNC,IAASC,OACL,cAAC,EAAD,IACFC,SAASC,eAAe,W","file":"static/js/main.d08f7869.chunk.js","sourcesContent":["const Footer = () => {\n  const footerStyle = {\n    color: 'green',\n    fontStyle: 'italic',\n    fontSize: 16\n  }\n  return (\n    <div style={footerStyle}>\n      <br />\n      <em>Note app, Department of Computer Science, University of Helsinki 2020</em>\n    </div>\n  )\n}\n\nexport default Footer;","import React from 'react'\n\n\nconst Note = ({note, toggleImportance}) => {\n    const label = note.important \n    ? \"make not important\" : \"make important\"\n    return (\n\n        <li className=\"note\">\n            {note.content}\n            <button onClick={toggleImportance}>{label}</button>    \n        </li> \n    )\n}\n\n\nexport default Note;","const Notification = ({message}) => {\n    if (message === null) {\n        return null\n    }\n\n    return (\n        <div className=\"error\">\n            {message}\n        </div>\n    )\n}\n\nexport default Notification;","import axios from 'axios'\nconst baseUrl = \"https://secret-forest-36085.herokuapp.com/api/notes\"\n\nconst getAll = () => {\n    const request = axios.get(baseUrl)\n    return request.then(response => response.data)\n}\n\nconst create = newObject => {\n    const request =  axios.post(baseUrl, newObject)\n    return request.then(response => response.data)\n}\n\n\nconst update = (id, newObject) => {\n    const request =  axios.put(`${baseUrl}/${id}`, newObject)\n    return request.then(response => response.data)\n}\n\nexport default { getAll, create, update}","import React, {useEffect , useState} from 'react';\nimport Footer from './components/Footer';\n// import axios from 'axios';\nimport Note from './components/Note'\nimport Notification from \"./components/notification\"\nimport noteService from './services/notes'\n\n\nconst App = () => {\n  const [notes, setNotes] = useState([])\n  const [newNote, setNewNote] = useState('')\n  const [showAll, setShowAll] = useState(true)\n  const [errorMessage, setErrorMesssage] = useState('some error message')\n\n\n  useEffect(() => {\n    console.log(\"effect\")\n    noteService\n      .getAll()\n      .then(initialNotes => {\n        setNotes(initialNotes)\n        })\n  }, [])\n\n\n  const addNote = (event) => {\n    event.preventDefault()\n    const noteObject = {\n      content: newNote,\n      date: new Date().toISOString(),\n      important: Math.random() > 0.5,\n    }\n    noteService\n      .create(noteObject)\n      .then(returndNote => {\n        setNotes(notes.concat(returndNote))\n        setNewNote('')\n      })\n\n  }\n\n  const handleNoteChange = (event) => {\n    console.log(event.target.value)\n    setNewNote(event.target.value)\n  }\n\n  const toggleImportanceOf = id => {\n    const url = `http://localhost:3001/notes/${id}`\n    const note = notes.find( n => n.id === id)\n    const changedNote = {...note, important: !note.important}\n\n    noteService\n    .update(url, changedNote)\n    .then( returndNote=> {\n      setNotes(notes.map(note => note.id !== id ? note : returndNote))\n    })\n    .catch( error => {\n      setErrorMesssage(\n\n        `the note '${note.content}' was already delted from server`\n      )\n\n      setTimeout(() => {\n        setErrorMesssage(null)\n      }, 5000)\n      setNotes(notes.filter(n => n.id !== id))\n    })\n    // console.log(`importance of ${id} needs to be toggled`)\n  }\n\n  const notesToShow = showAll\n    ? notes\n    : notes.filter(note => note.important)\n\n  return (\n    <div>\n      <h1>Notes</h1>\n      <Notification message={errorMessage} />\n      <div>\n        <button onClick={() => setShowAll(!showAll)}>\n          show {showAll ? 'important' : 'all' }\n        </button>\n      </div>      \n      <ul>\n        {notesToShow.map((note, i) => \n          <Note key={i} note={note} toggleImportance={ () => {toggleImportanceOf(note.id)}}/>\n        )}\n      </ul>\n      <form onSubmit={addNote}>\n        <input\n          value={newNote}\n          onChange={handleNoteChange}\n        />\n        <button type=\"submit\">save</button>\n      </form>  \n      <Footer />\n    </div>\n  )\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport \"./index.css\";\n\nReactDOM.render(\n    <App />,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}